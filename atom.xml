<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hhdds&#39;s blog</title>
  
  <subtitle>学习，分享，记录。</subtitle>
  <link href="https://hhdds1377.github.io/atom.xml" rel="self"/>
  
  <link href="https://hhdds1377.github.io/"/>
  <updated>2025-08-07T11:51:25.940Z</updated>
  <id>https://hhdds1377.github.io/</id>
  
  <author>
    <name>hhdds</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人工智能</title>
    <link href="https://hhdds1377.github.io/2027/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    <id>https://hhdds1377.github.io/2027/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</id>
    <published>2027-11-06T09:19:43.000Z</published>
    <updated>2025-08-07T11:51:25.940Z</updated>
    
    <content type="html"><![CDATA[<p>待续…</p>]]></content>
    
    
    <summary type="html">Python之奥义，人工智能不容置疑。</summary>
    
    
    
    <category term="Python" scheme="https://hhdds1377.github.io/categories/Python/"/>
    
    
    <category term="技术" scheme="https://hhdds1377.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>游戏开发</title>
    <link href="https://hhdds1377.github.io/2027/10/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    <id>https://hhdds1377.github.io/2027/10/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/</id>
    <published>2027-10-29T15:54:48.000Z</published>
    <updated>2025-08-07T08:00:40.960Z</updated>
    
    <content type="html"><![CDATA[<p>待续…</p>]]></content>
    
    
    <summary type="html">Python模块多，可以做游戏。</summary>
    
    
    
    <category term="Python" scheme="https://hhdds1377.github.io/categories/Python/"/>
    
    
    <category term="技术" scheme="https://hhdds1377.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Web 开发</title>
    <link href="https://hhdds1377.github.io/2027/09/Web%20%E5%BC%80%E5%8F%91/"/>
    <id>https://hhdds1377.github.io/2027/09/Web%20%E5%BC%80%E5%8F%91/</id>
    <published>2027-09-18T11:07:44.000Z</published>
    <updated>2025-08-07T08:00:33.233Z</updated>
    
    <content type="html"><![CDATA[<p>待续…</p>]]></content>
    
    
    <summary type="html">如何用Python做一个网站，这是一个问题。</summary>
    
    
    
    <category term="Python" scheme="https://hhdds1377.github.io/categories/Python/"/>
    
    
    <category term="技术" scheme="https://hhdds1377.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>网络爬虫</title>
    <link href="https://hhdds1377.github.io/2027/08/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    <id>https://hhdds1377.github.io/2027/08/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</id>
    <published>2027-08-17T11:06:23.000Z</published>
    <updated>2025-08-07T08:00:21.987Z</updated>
    
    <content type="html"><![CDATA[<p>待续…</p>]]></content>
    
    
    <summary type="html">网络爬虫不是小虫子，它能成大器。</summary>
    
    
    
    <category term="Python" scheme="https://hhdds1377.github.io/categories/Python/"/>
    
    
    <category term="技术" scheme="https://hhdds1377.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>GUI 编程</title>
    <link href="https://hhdds1377.github.io/2027/07/GUI%20%E7%BC%96%E7%A8%8B/"/>
    <id>https://hhdds1377.github.io/2027/07/GUI%20%E7%BC%96%E7%A8%8B/</id>
    <published>2027-07-16T15:56:22.000Z</published>
    <updated>2025-08-07T08:00:10.272Z</updated>
    
    <content type="html"><![CDATA[<p>待续…</p>]]></content>
    
    
    <summary type="html">没有GUI，何谈程序设计？</summary>
    
    
    
    <category term="Python" scheme="https://hhdds1377.github.io/categories/Python/"/>
    
    
    <category term="技术" scheme="https://hhdds1377.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>基础部分</title>
    <link href="https://hhdds1377.github.io/2025/06/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/"/>
    <id>https://hhdds1377.github.io/2025/06/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/</id>
    <published>2025-06-15T07:23:25.000Z</published>
    <updated>2025-08-30T07:20:45.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本教程主要供已经学习了Python的用户参照学习,不应该用于启蒙.虽然萌新不应该以此作为学习教材,但可以通过本教程观览Python语法的模式和特点.</p><p>在本教程中,有大量的”语法+作用+解析”的讲解方式的嵌套使用,内容趋向”全”,而非”细”.</p><p>另外,本教程采用全英文标点符号,Python版本为”Python 3.13.2”.</p><h1 id="1-控制流工具"><a href="#1-控制流工具" class="headerlink" title="1 控制流工具"></a>1 控制流工具</h1><p>什么是<strong>控制流工具</strong>?</p><p>在Python中,语法可以不规范地分为关键字语法和非关键字语法.</p><p>除去作为值和变量,操作符的关键字(None,True,False,is,not,or,and,in),关键字语法的结构往往是<strong>表达式结构</strong>,而非关键字语法往往是<strong>面向对象</strong>的,控制流工具离不开关键字.</p><p>所以,控制流工具就是由部分关键字引导的表达式结构.</p><h2 id="1-1-条件控制-if-语句"><a href="#1-1-条件控制-if-语句" class="headerlink" title="1.1 条件控制 - if 语句"></a>1.1 条件控制 - if 语句</h2><p>在条件控制中,包含以下关键字:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">elif</span> <span class="keyword">else</span></span><br></pre></td></tr></table></figure><p>if 语句必须含有if部分,elif和else部分是可选的,按照结构可以笼统分为:</p><p>并列条件:if…elif…else….</p><p>嵌套条件:并列条件的嵌套使用.</p><h2 id="1-2-循环控制-for-语句和-while-语句"><a href="#1-2-循环控制-for-语句和-while-语句" class="headerlink" title="1.2 循环控制 - for 语句和 while 语句"></a>1.2 循环控制 - for 语句和 while 语句</h2><p>在循环控制中,包含以下关键字:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">in</span> <span class="keyword">while</span> <span class="keyword">continue</span> <span class="keyword">break</span> <span class="keyword">else</span></span><br></pre></td></tr></table></figure><h3 id="1-2-1-for-语句"><a href="#1-2-1-for-语句" class="headerlink" title="1.2.1 for 语句"></a>1.2.1 for 语句</h3><p>for 语句的作用是在序列(也可以是迭代器)上迭代.它的语法是:</p><p><code>for var in seq:</code></p><p>与for 语句配合的常用函数有range(start,end,step),enumerate(seq).</p><h3 id="1-2-2-while-语句"><a href="#1-2-2-while-语句" class="headerlink" title="1.2.2 while 语句"></a>1.2.2 while 语句</h3><p>while 语句的作用是在语句中循环,直到条件不再满足.它的语法是:</p><p><code>while LogicException:</code></p><h3 id="1-2-3-continue和break"><a href="#1-2-3-continue和break" class="headerlink" title="1.2.3 continue和break"></a>1.2.3 continue和break</h3><p>continue的作用是跳出此次循环,进入下一个循环,如果是最后一次循环,结束循环.</p><p>break的作用是跳出所有循环,结束循环.</p><h3 id="1-2-3-else"><a href="#1-2-3-else" class="headerlink" title="1.2.3 else"></a>1.2.3 else</h3><p>else的作用与条件控制有些不一样,只有循环不被break关键字中断时,循环结束后会执行else字段.</p><h2 id="1-3-异常控制-try-语句"><a href="#1-3-异常控制-try-语句" class="headerlink" title="1.3 异常控制 - try 语句"></a>1.3 异常控制 - try 语句</h2><p>在异常控制中,包含以下关键字:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> <span class="keyword">except</span> <span class="keyword">else</span> <span class="keyword">finally</span> <span class="keyword">raise</span> <span class="keyword">from</span> <span class="keyword">assert</span></span><br></pre></td></tr></table></figure><h3 id="1-3-1-try-语句"><a href="#1-3-1-try-语句" class="headerlink" title="1.3.1 try 语句"></a>1.3.1 try 语句</h3><p>在try语句中,try必须有配套的except,else和finally是可选的.</p><p>结构通常为:<code>try...except...else...finally</code></p><h2 id="1-3-2-raise-抛出异常"><a href="#1-3-2-raise-抛出异常" class="headerlink" title="1.3.2 raise 抛出异常"></a>1.3.2 raise 抛出异常</h2><p>raise语段的语法为<code>raise ErrorClass(ErrorException) from ParentError</code></p><p>作用:指定错误类型,可选地加入错误描述和父错误(用于形成错误链).</p><p>解析:</p><ol><li>ErrorClass:抛出的错误的类型.</li><li>ErrorException:错误描述.</li><li>parentError:如果parentError被抛出,会导致该错误也被抛出.这种连环错误被称为错误链.</li></ol><h2 id="1-3-3-assert-断言"><a href="#1-3-3-assert-断言" class="headerlink" title="1.3.3 assert 断言"></a>1.3.3 assert 断言</h2><p>assert的语法为<code>assert LogicException[,ErrorException]</code></p><p>作用:检测逻辑体,如果为是,略过,如果为否,抛出AssertionError,可以指定错误描述.</p><p>解析:</p><ol><li>LogicException:逻辑体,必须返回布尔值.</li><li>ErrorException:错误描述.</li></ol><h2 id="1-3-4-引发和处理多个不相关的异常"><a href="#1-3-4-引发和处理多个不相关的异常" class="headerlink" title="1.3.4 引发和处理多个不相关的异常"></a>1.3.4 引发和处理多个不相关的异常</h2><p>内置的ExceptionGroup,语法为:</p><p><code>ExceptionGroup(ErrorException,Errorlist)</code></p><p>它打包了一个异常实例的列表,可以一起被引发,它本身就是一个异常,可以被捕获.</p><p><strong>except*</strong></p><p>通过使用except*代替except,可以选择地处理组中复合某种类型的异常.</p><h3 id="1-3-5-add-note-note-注释化异常"><a href="#1-3-5-add-note-note-注释化异常" class="headerlink" title="1.3.5 add_note(note)注释化异常"></a>1.3.5 add_note(note)注释化异常</h3><p>error.add_note(note)</p><p>作用:注释化异常,接收一个字符串,并将其添加到异常的注释列表.</p><p>解析:</p><ol><li>note:被添加的注释.</li></ol><h2 id="1-4-函数控制-def-语句和-lambda-语句"><a href="#1-4-函数控制-def-语句和-lambda-语句" class="headerlink" title="1.4 函数控制 - def 语句和 lambda 语句"></a>1.4 函数控制 - def 语句和 lambda 语句</h2><h3 id="1-4-1-def-和-lambda-语法"><a href="#1-4-1-def-和-lambda-语法" class="headerlink" title="1.4.1 def 和 lambda 语法"></a>1.4.1 def 和 lambda 语法</h3><p>函数控制的关键字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">lambda</span></span><br></pre></td></tr></table></figure><p>作用：</p><ol><li><p>def</p><p>后跟函数名与括号内的形参列表.</p></li><li><p>lambda</p><p><code>lambda [char1, char2 , ...] : expression</code></p></li></ol><h3 id="1-4-2-文档字符串"><a href="#1-4-2-文档字符串" class="headerlink" title="1.4.2 文档字符串"></a>1.4.2 文档字符串</h3><p>文档字符串: 函数内的第一条语句(可以跨行,但必须用跨行字符串)是字符串时, 该字符串就是文档字符串(docstring).</p><p>文档字符串的作用:</p><ol><li><p>利用自动化工具(如Sphinx等)自动生成在线文档或打印版文档.</p></li><li><p>帮助开发者在浏览代码时直接查阅文档,利用__doc__属性或help(defname)内置函数可以查看该字符串.</p></li></ol><p>多行文档字符串的书写规范(PEP 257):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def &lt;fnc&gt;(chars):</span><br><span class="line">    &lt;作用描述&gt;</span><br><span class="line"></span><br><span class="line">    &lt;参数(arguments)&gt; &quot;:&quot;</span><br><span class="line">        &lt;参数2&gt; &quot;(&quot; (&lt;参数类型&gt; &quot;/&quot;+) * &quot;)&quot; &quot;:&quot; &lt;参数描述&gt;</span><br><span class="line">        (&lt;参数1&gt; &quot;(&quot; (&lt;参数类型&gt; &quot;/&quot;+) * &quot;)&quot; &quot;:&quot; &lt;参数描述&gt;)*</span><br><span class="line"></span><br><span class="line">    &lt;返回(return)&gt;</span><br><span class="line">        &lt;返回值类型&gt; &quot;:&quot; &lt;返回值解析&gt;</span><br></pre></td></tr></table></figure><p>文档字符串与普通注释的区别:</p><p>会被Python解释器解释,而普通注释会被忽视.</p><h3 id="1-4-3-局部变量符号表"><a href="#1-4-3-局部变量符号表" class="headerlink" title="1.4.3 局部变量符号表"></a>1.4.3 局部变量符号表</h3><p>引用变量时,首先,在局部符号表里查找变量,然后,是外层函数局部符号表,再是全局符号表,最后是内置名称符号表.</p><h3 id="1-4-4-位置参数"><a href="#1-4-4-位置参数" class="headerlink" title="1.4.4 位置参数"></a>1.4.4 位置参数</h3><p>与形参一一对应的参数是位置参数.</p><h3 id="1-4-5-关键字参数"><a href="#1-4-5-关键字参数" class="headerlink" title="1.4.5 关键字参数"></a>1.4.5 关键字参数</h3><p>形似kwarg&#x3D;value形式的参数是关键字参数.</p><h3 id="1-4-6-特殊参数"><a href="#1-4-6-特殊参数" class="headerlink" title="1.4.6 特殊参数"></a>1.4.6 特殊参数</h3><p>&#x2F;和*是可选的特殊参数,可以限定参数是位置参数还是关键字参数.</p><p>在&#x2F;前的参数是位置参数,在&#x2F;和*中的参数可以是两种参数,在*后的参数是关键字参数.</p><h3 id="1-4-7-任意实参列表"><a href="#1-4-7-任意实参列表" class="headerlink" title="1.4.7 任意实参列表"></a>1.4.7 任意实参列表</h3><p>*args表示可变数量的位置参数.</p><p>**kwargs表示可变数量的关键字参数.</p><h3 id="1-4-8-解包实参列表"><a href="#1-4-8-解包实参列表" class="headerlink" title="1.4.8 解包实参列表"></a>1.4.8 解包实参列表</h3><p>*符号可以将元祖或列表中的参数解包出来.</p><p>**符号可以将字典中的参数解包出来.</p><h2 id="1-5-匹配控制-match-语句"><a href="#1-5-匹配控制-match-语句" class="headerlink" title="1.5 匹配控制 - match 语句"></a>1.5 匹配控制 - match 语句</h2><p>匹配控制的关键字:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> <span class="keyword">case</span> <span class="keyword">as</span></span><br></pre></td></tr></table></figure><p>match语句接收一个表达式并把它的值与一个或多个case块给出的一系列模式进行比较.只有第一个匹配的模式会被执行.</p><p>match语句也可以用于捕获值.</p><p>结构是:match…case,match和case都是必要的.</p><p>需要注意的是,_在match语句中可以作为通配符,位置在match语句的最后一个case子语句,表示如果没有其他case被匹配成功,则_被匹配成功.</p><p>也可以用|将多个值组合到一个模式中.</p><h2 id="1-6-pass-语句"><a href="#1-6-pass-语句" class="headerlink" title="1.6 pass 语句"></a>1.6 pass 语句</h2><p>pass语句不执行任何动作.语法上需要一个语句,但程序不需执行任何动作时,可以使用该语句.</p><h1 id="2-数据结构"><a href="#2-数据结构" class="headerlink" title="2 数据结构"></a>2 数据结构</h1><h2 id="2-1-列表"><a href="#2-1-列表" class="headerlink" title="2.1 列表"></a>2.1 列表</h2><h3 id="2-1-1-列表的方法"><a href="#2-1-1-列表的方法" class="headerlink" title="2.1.1 列表的方法"></a>2.1.1 列表的方法</h3><ol><li><p>list.append(x)</p><p>在列表末尾添加一项,类似于a[len(a):]&#x3D;[x].</p></li><li><p>list.extend(iterable)</p><p>通过添加来自iterable的所有项来扩展列表.类似于a[len(a):]&#x3D;iterable</p></li><li><p>list.insert(i,x)</p><p>在指定位置插入元素.第一个参数是插入元素的索引,因此,a.insert(0,x)在列表开头插入元素,a.insert(len(a),x)等同于a.append(x).</p></li><li><p>list.remove(x)</p><p>从列表中删除第一个值为x的元素.未找到指定元素时,触发ValueError异常.</p></li><li><p>list.pop([i])</p><p>移除列表中给定位置上的条目,并返回该条目.如果未指定索引号,则a.pop()将移除并返回列表中的最后一个条目.如果列表为空或索引号在列表索引范围之外则会引发IndexError.</p></li><li><p>list.clear()</p><p>移除列表中的所有项.类似于del a[:]</p></li><li><p>list.index(x[,start[,end]])</p><p>返回列表中第一个值为x的元素的零基索引.未找到指定元素时,触发,ValueError异常.</p><p>可选参数start和end是切片符号,用于将搜索限制为列表的特定子序列.</p></li><li><p>list.count(x)</p><p>返回列表中元素x出现的次数.</p></li><li><p>list.sort(*,key&#x3D;None,reverse&#x3D;False)</p><p>就地排序列表中的元素(详见sorted())</p></li><li><p>list.reverse()</p><p>翻转列表中的元素.</p></li><li><p>list.copy()</p><p>返回列表的浅拷贝.类似于a[:].</p></li></ol><h3 id="2-1-2-用列表实现堆栈"><a href="#2-1-2-用列表实现堆栈" class="headerlink" title="2.1.2 用列表实现堆栈"></a>2.1.2 用列表实现堆栈</h3><p>堆栈就是”后进后出”的线性表.添加条目到栈顶,可使用append(),从栈顶取出条目,则使用pop().</p><h3 id="2-1-3-用列表实现队列"><a href="#2-1-3-用列表实现队列" class="headerlink" title="2.1.3  用列表实现队列"></a>2.1.3  用列表实现队列</h3><p>队列就是”先进先出”的线性表.</p><p>但是列表作为队列的效率很慢,因为在列表插入或移除元素很慢,所有元素都必须移动一位.</p><p>实现队列最好用collections.deque,可以快速从两端添加或删除元素.</p><p><strong>collections.deque模块的常用方法</strong></p><ol><li><p>appendleft(x)</p><p>在队列左端添加元素.</p></li><li><p>popleft(x)</p><p>在队列左端删除元素.</p></li><li><p>extendleft(iterable)</p><p>在队列左端添加可迭代对象的所有项.</p></li></ol><p>实例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">queue=deque([<span class="string">&quot;Eric&quot;</span>,<span class="string">&quot;john&quot;</span>,<span class="string">&quot;Michael&quot;</span>])</span><br><span class="line">queue.append(<span class="string">&quot;Terry&quot;</span>)</span><br><span class="line">queue.append(<span class="string">&quot;Graham&quot;</span>)</span><br><span class="line">queue.popleft()</span><br><span class="line">queue.popleft()</span><br></pre></td></tr></table></figure><h3 id="2-1-4-列表推导式"><a href="#2-1-4-列表推导式" class="headerlink" title="2.1.4 列表推导式"></a>2.1.4 列表推导式</h3><p>列表推导式的语法:</p><p><code>[expression for statement (for statement)* (if statement)*]</code></p><p>即一个表达式,后面为一个for子句,然后,是零个或多个for或if子句.</p><h2 id="2-1-5-del语句"><a href="#2-1-5-del语句" class="headerlink" title="2.1.5 del语句"></a>2.1.5 del语句</h2><p>可以按索引从一个列表移除条目.</p><h2 id="2-2-元祖"><a href="#2-2-元祖" class="headerlink" title="2.2 元祖"></a>2.2 元祖</h2><h1 id="3-模块"><a href="#3-模块" class="headerlink" title="3 模块"></a>3 模块</h1><h1 id="4-变量和标识符"><a href="#4-变量和标识符" class="headerlink" title="4 变量和标识符"></a>4 变量和标识符</h1><h1 id="5-输入与输出"><a href="#5-输入与输出" class="headerlink" title="5 输入与输出"></a>5 输入与输出</h1><h1 id="6-类"><a href="#6-类" class="headerlink" title="6 类"></a>6 类</h1><h1 id="7-虚拟环境和包"><a href="#7-虚拟环境和包" class="headerlink" title="7 虚拟环境和包"></a>7 虚拟环境和包</h1><h1 id="8-基础标准库"><a href="#8-基础标准库" class="headerlink" title="8 基础标准库"></a>8 基础标准库</h1><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="A-Python-关键字"><a href="#A-Python-关键字" class="headerlink" title="A Python 关键字"></a>A Python 关键字</h2><p>使用<code>print(keyword.kwlist) #import keyword</code>查看Python当前的所有关键字.</p><p><strong>Python所有关键字</strong><br>Python的3.13版本的关键字有36个:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;await&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>Python关键字的分类</strong></p><ol><li><p>值</p><p>None True False</p></li><li><p>异步</p><p>await async</p></li><li><p>操作符</p><p>is in not and or</p></li><li><p>函数</p><p>def lambda return</p></li><li><p>作用域</p><p>global nonlocal</p></li><li><p>条件</p><p>if elif else</p></li><li><p>异常</p><p>try except *else finally assert raise continue from</p></li><li><p>模块</p><p>import as from</p></li><li><p>上下文管理器</p><p>with *as</p></li><li><p>循环</p><p>for *in while continue break *else</p></li><li><p>类</p><p>class</p></li><li><p>方法</p><p>del</p></li><li><p>生成器</p><p>yield</p></li><li><p>占位</p><p>pass</p></li><li><p>匹配</p><p>match case as</p></li></ol><p>其中,<code>*key</code>表示重复的关键字,关键字最多的分类是<strong>异常</strong>分类,有六个关键字,大部分分类只有1~3个关键字.</p>]]></content>
    
    
    <summary type="html">学好Python，必须夯实基础。</summary>
    
    
    
    <category term="Python" scheme="https://hhdds1377.github.io/categories/Python/"/>
    
    
    <category term="技术" scheme="https://hhdds1377.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
