[{"title":"GUI 编程","url":"/2027/07/GUI%20%E7%BC%96%E7%A8%8B/","content":"待续…\n","categories":["Python"],"tags":["技术"]},{"title":"Web 开发","url":"/2027/09/Web%20%E5%BC%80%E5%8F%91/","content":"待续…\n","categories":["Python"],"tags":["技术"]},{"title":"人工智能","url":"/2025/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/","content":"待续…\n","categories":["Python"],"tags":["技术"]},{"title":"基础部分","url":"/2025/06/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/","content":"前言本教程主要供已经学习了Python的用户参照学习,不应该用于启蒙.虽然萌新不应该以此作为学习教材,但可以通过本教程观览Python语法的模式和特点.\n在本教程中,有大量的”语法+作用+解析”的讲解方式的嵌套使用,内容趋向”全”,而非”细”.\n另外,本教程采用全英文标点符号,Python版本为”Python 3.13.2”.\n1 控制流工具什么是控制流?\n在Python中,语法可以不规范地分为关键字语法和非关键字语法.\n除去作为值和变量,操作符的关键字(None,True,False,is,not,or,and,in),关键字语法的结构往往是key content,而非关键字语法往往是object.method(chars),控制流的语法属于前者.\n而Python有36个关键字,这36个关键字中,只有一部分属于控制流关键字,由这些控制流关键字引导的语句就是控制流.\n1.1 条件控制 - if 语句在条件控制中,包含以下关键字:\nif elif else\n\nif 语句必须含有if部分,elif和else部分是可选的,按照结构可以笼统分为:\n并列条件:if…elif…else….\n嵌套条件:并列条件的嵌套使用.\n1.2 循环控制 - for 语句和 while 语句在循环控制中,包含以下关键字:\nfor in while continue break else\n\n1.2.1 for 语句for 语句的作用是在序列(也可以是迭代器)上迭代.它的语法是:\nfor var in seq:\n与for 语句配合的常用函数有range(start,end,step),enumerate(seq).\n1.2.2 while 语句while 语句的作用是在语句中循环,直到条件不再满足.它的语法是:\nwhile LogicException:\n1.2.3 continue和breakcontinue的作用是跳出此次循环,进入下一个循环,如果是最后一次循环,结束循环.\nbreak的作用是跳出所有循环,结束循环.\n1.2.3 elseelse的作用与条件控制有些不一样,只有循环不被break关键字中断时,循环结束后会执行else字段.\n1.3 异常控制 - try 语句在异常控制中,包含以下关键字:\ntry except else finally raise from assert\n\n1.3.1 try 语句在try语句中,try必须有配套的except,else和finally是可选的.\n结构通常为:try...except...else...finally\n1.3.2 raise 抛出异常raise语段的语法为raise ErrorClass(ErrorException) from ParentError\n作用:指定错误类型,可选地加入错误描述和父错误(用于形成错误链).\n解析:\n\nErrorClass:抛出的错误的类型.\nErrorException:错误描述.\nparentError:如果parentError被抛出,会导致该错误也被抛出.这种连环错误被称为错误链.\n\n1.3.3 assert 断言assert的语法为assert LogicException[,ErrorException]\n作用:检测逻辑体,如果为是,略过,如果为否,抛出AssertionError,可以指定错误描述.\n解析:\n\nLogicException:逻辑体,必须返回布尔值.\nErrorException:错误描述.\n\n1.3.4 引发和处理多个不相关的异常内置的ExceptionGroup,语法为:\nExceptionGroup(ErrorException,Errorlist)\n它打包了一个异常实例的列表,可以一起被引发,它本身就是一个异常,可以被捕获.\nexcept*\n通过使用except*代替except,可以选择地处理组中复合某种类型的异常.\n1.3.5 add_note(note)注释化异常error.add_note(note)\n作用:注释化异常,接收一个字符串,并将其添加到异常的注释列表.\n解析:\n\nnote:被添加的注释.\n\n1.4 函数控制 - def 语句和 lambda 语句1.5 匹配控制 - match 语句1.6 pass 语句2 数据结构3 模块4 变量和标识符5 输入与输出6 类7 虚拟环境和包8 基础标准库附录A Python 关键字使用print(keyword.kwlist) #import keyword查看Python当前的所有关键字.\nPython所有关键字Python的3.13版本的关键字有36个:\n[&#x27;False&#x27;, &#x27;None&#x27;, &#x27;True&#x27;, &#x27;and&#x27;, &#x27;as&#x27;, &#x27;assert&#x27;, &#x27;async&#x27;, &#x27;await&#x27;, &#x27;break&#x27;, &#x27;class&#x27;, &#x27;continue&#x27;, &#x27;def&#x27;, &#x27;del&#x27;, &#x27;elif&#x27;, &#x27;else&#x27;, &#x27;except&#x27;, &#x27;finally&#x27;, &#x27;for&#x27;, &#x27;from&#x27;, &#x27;global&#x27;, &#x27;if&#x27;, &#x27;import&#x27;, &#x27;in&#x27;, &#x27;is&#x27;, &#x27;lambda&#x27;, &#x27;nonlocal&#x27;, &#x27;not&#x27;, &#x27;or&#x27;, &#x27;pass&#x27;, &#x27;raise&#x27;, &#x27;return&#x27;, &#x27;try&#x27;, &#x27;while&#x27;, &#x27;with&#x27;, &#x27;yield&#x27;]\n\nPython关键字的分类\n\n值\nNone True False\n\n异步\nawait async\n\n操作符\nis in not and or\n\n函数\ndef lambda return\n\n作用域\nglobal nonlocal\n\n条件\nif elif else\n\n异常\ntry except *else finally assert raise continue from\n\n模块\nimport as from\n\n上下文管理器\nwith *as\n\n循环\nfor *in while continue break *else\n\n类\nclass\n\n方法\ndel\n\n生成器\nyield\n\n占位符\npass\n\n匹配符\nmatch case\n\n\n其中,*key表示重复的关键字,关键字最多的分类是异常分类,有六个关键字,大部分分类只有1~3个关键字.\n","categories":["Python"],"tags":["技术"]},{"title":"游戏开发","url":"/2027/10/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/","content":"待续…\n","categories":["Python"],"tags":["技术"]},{"title":"网络爬虫","url":"/2027/08/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/","content":"待续…\n","categories":["Python"],"tags":["技术"]}]