[{"title":"Web 开发","url":"/2027/09/Web%20%E5%BC%80%E5%8F%91/","content":"待续…\n","categories":["Python"],"tags":["技术"]},{"title":"GUI 编程","url":"/2027/07/GUI%20%E7%BC%96%E7%A8%8B/","content":"待续…\n","categories":["Python"],"tags":["技术"]},{"title":"基础部分","url":"/2025/06/%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/","content":"前言本教程主要供已经学习了Python的用户参照学习,不应该用于启蒙.虽然萌新不应该以此作为学习教材,但可以通过本教程观览Python语法的模式和特点.\n在本教程中,有大量的”语法+作用+解析”的讲解方式的嵌套使用,内容趋向”全”,而非”细”.\n另外,本教程采用全英文标点符号,Python版本为”Python 3.13.2”.\n1 控制流工具什么是控制流工具?\n在Python中,语法可以不规范地分为关键字语法和非关键字语法.\n除去作为值和变量,操作符的关键字(None,True,False,is,not,or,and,in),关键字语法的结构往往是表达式结构,而非关键字语法往往是面向对象的,控制流工具离不开关键字.\n所以,控制流工具就是由部分关键字引导的表达式结构.\n1.1 条件控制 - if 语句在条件控制中,包含以下关键字:\nif elif else\n\nif 语句必须含有if部分,elif和else部分是可选的,按照结构可以笼统分为:\n并列条件:if…elif…else….\n嵌套条件:并列条件的嵌套使用.\n1.2 循环控制 - for 语句和 while 语句在循环控制中,包含以下关键字:\nfor in while continue break else\n\n1.2.1 for 语句for 语句的作用是在序列(也可以是迭代器)上迭代.它的语法是:\nfor var in seq:\n与for 语句配合的常用函数有range(start,end,step),enumerate(seq).\n1.2.2 while 语句while 语句的作用是在语句中循环,直到条件不再满足.它的语法是:\nwhile LogicException:\n1.2.3 continue和breakcontinue的作用是跳出此次循环,进入下一个循环,如果是最后一次循环,结束循环.\nbreak的作用是跳出所有循环,结束循环.\n1.2.3 elseelse的作用与条件控制有些不一样,只有循环不被break关键字中断时,循环结束后会执行else字段.\n1.3 异常控制 - try 语句在异常控制中,包含以下关键字:\ntry except else finally raise from assert\n\n1.3.1 try 语句在try语句中,try必须有配套的except,else和finally是可选的.\n结构通常为:try...except...else...finally\n1.3.2 raise 抛出异常raise语段的语法为raise ErrorClass(ErrorException) from ParentError\n作用:指定错误类型,可选地加入错误描述和父错误(用于形成错误链).\n解析:\n\nErrorClass:抛出的错误的类型.\nErrorException:错误描述.\nparentError:如果parentError被抛出,会导致该错误也被抛出.这种连环错误被称为错误链.\n\n1.3.3 assert 断言assert的语法为assert LogicException[,ErrorException]\n作用:检测逻辑体,如果为是,略过,如果为否,抛出AssertionError,可以指定错误描述.\n解析:\n\nLogicException:逻辑体,必须返回布尔值.\nErrorException:错误描述.\n\n1.3.4 引发和处理多个不相关的异常内置的ExceptionGroup,语法为:\nExceptionGroup(ErrorException,Errorlist)\n它打包了一个异常实例的列表,可以一起被引发,它本身就是一个异常,可以被捕获.\nexcept*\n通过使用except*代替except,可以选择地处理组中复合某种类型的异常.\n1.3.5 add_note(note)注释化异常error.add_note(note)\n作用:注释化异常,接收一个字符串,并将其添加到异常的注释列表.\n解析:\n\nnote:被添加的注释.\n\n1.4 函数控制 - def 语句和 lambda 语句1.4.1 def 和 lambda 语法函数控制的关键字：\ndef lambda\n\n作用：\n\ndef\n后跟函数名与括号内的形参列表.\n\nlambda\nlambda [char1, char2 , ...] : expression\n\n\n1.4.2 文档字符串文档字符串: 函数内的第一条语句(可以跨行,但必须用跨行字符串)是字符串时, 该字符串就是文档字符串(docstring).\n文档字符串的作用:\n\n利用自动化工具(如Sphinx等)自动生成在线文档或打印版文档.\n\n帮助开发者在浏览代码时直接查阅文档,利用__doc__属性或help(defname)内置函数可以查看该字符串.\n\n\n多行文档字符串的书写规范(PEP 257):\ndef &lt;fnc&gt;(chars):    &lt;作用描述&gt;    &lt;参数(arguments)&gt; &quot;:&quot;        &lt;参数2&gt; &quot;(&quot; (&lt;参数类型&gt; &quot;/&quot;+) * &quot;)&quot; &quot;:&quot; &lt;参数描述&gt;        (&lt;参数1&gt; &quot;(&quot; (&lt;参数类型&gt; &quot;/&quot;+) * &quot;)&quot; &quot;:&quot; &lt;参数描述&gt;)*    &lt;返回(return)&gt;        &lt;返回值类型&gt; &quot;:&quot; &lt;返回值解析&gt;\n\n文档字符串与普通注释的区别:\n会被Python解释器解释,而普通注释会被忽视.\n1.4.3 局部变量符号表引用变量时,首先,在局部符号表里查找变量,然后,是外层函数局部符号表,再是全局符号表,最后是内置名称符号表.\n1.4.4 位置参数与形参一一对应的参数是位置参数.\n1.4.5 关键字参数形似kwarg&#x3D;value形式的参数是关键字参数.\n1.4.6 特殊参数&#x2F;和*是可选的特殊参数,可以限定参数是位置参数还是关键字参数.\n在&#x2F;前的参数是位置参数,在&#x2F;和*中的参数可以是两种参数,在*后的参数是关键字参数.\n1.4.7 任意实参列表*args表示可变数量的位置参数.\n**kwargs表示可变数量的关键字参数.\n1.4.8 解包实参列表*符号可以将元祖或列表中的参数解包出来.\n**符号可以将字典中的参数解包出来.\n1.5 匹配控制 - match 语句匹配控制的关键字:\nmatch case as\n\nmatch语句接收一个表达式并把它的值与一个或多个case块给出的一系列模式进行比较.只有第一个匹配的模式会被执行.\nmatch语句也可以用于捕获值.\n结构是:match…case,match和case都是必要的.\n需要注意的是,_在match语句中可以作为通配符,位置在match语句的最后一个case子语句,表示如果没有其他case被匹配成功,则_被匹配成功.\n也可以用|将多个值组合到一个模式中.\n1.6 pass 语句pass语句不执行任何动作.语法上需要一个语句,但程序不需执行任何动作时,可以使用该语句.\n2 数据结构2.1 列表2.1.1 列表的方法\nlist.append(x)\n在列表末尾添加一项,类似于a[len(a):]&#x3D;[x].\n\nlist.extend(iterable)\n通过添加来自iterable的所有项来扩展列表.类似于a[len(a):]&#x3D;iterable\n\nlist.insert(i,x)\n在指定位置插入元素.第一个参数是插入元素的索引,因此,a.insert(0,x)在列表开头插入元素,a.insert(len(a),x)等同于a.append(x).\n\nlist.remove(x)\n从列表中删除第一个值为x的元素.未找到指定元素时,触发ValueError异常.\n\nlist.pop([i])\n移除列表中给定位置上的条目,并返回该条目.如果未指定索引号,则a.pop()将移除并返回列表中的最后一个条目.如果列表为空或索引号在列表索引范围之外则会引发IndexError.\n\nlist.clear()\n移除列表中的所有项.类似于del a[:]\n\nlist.index(x[,start[,end]])\n返回列表中第一个值为x的元素的零基索引.未找到指定元素时,触发,ValueError异常.\n可选参数start和end是切片符号,用于将搜索限制为列表的特定子序列.\n\nlist.count(x)\n返回列表中元素x出现的次数.\n\nlist.sort(*,key&#x3D;None,reverse&#x3D;False)\n就地排序列表中的元素(详见sorted())\n\nlist.reverse()\n翻转列表中的元素.\n\nlist.copy()\n返回列表的浅拷贝.类似于a[:].\n\n\n2.1.2 用列表实现堆栈堆栈就是”后进后出”的线性表.添加条目到栈顶,可使用append(),从栈顶取出条目,则使用pop().\n2.1.3  用列表实现队列队列就是”先进先出”的线性表.\n但是列表作为队列的效率很慢,因为在列表插入或移除元素很慢,所有元素都必须移动一位.\n实现队列最好用collections.deque,可以快速从两端添加或删除元素.\ncollections.deque模块的常用方法\n\nappendleft(x)\n在队列左端添加元素.\n\npopleft(x)\n在队列左端删除元素.\n\nextendleft(iterable)\n在队列左端添加可迭代对象的所有项.\n\n\n实例:\nfrom collections import dequequeue=deque([&quot;Eric&quot;,&quot;john&quot;,&quot;Michael&quot;])queue.append(&quot;Terry&quot;)queue.append(&quot;Graham&quot;)queue.popleft()queue.popleft()\n\n2.1.4 列表推导式列表推导式的语法:\n[expression for statement (for statement)* (if statement)*]\n即一个表达式,后面为一个for子句,然后,是零个或多个for或if子句.\n2.1.5 del语句可以按索引从一个列表移除条目.\n2.2 元祖3 模块4 变量和标识符5 输入与输出6 类7 虚拟环境和包8 基础标准库附录A Python 关键字使用print(keyword.kwlist) #import keyword查看Python当前的所有关键字.\nPython所有关键字Python的3.13版本的关键字有36个:\n[&#x27;False&#x27;, &#x27;None&#x27;, &#x27;True&#x27;, &#x27;and&#x27;, &#x27;as&#x27;, &#x27;assert&#x27;, &#x27;async&#x27;, &#x27;await&#x27;, &#x27;break&#x27;, &#x27;class&#x27;, &#x27;continue&#x27;, &#x27;def&#x27;, &#x27;del&#x27;, &#x27;elif&#x27;, &#x27;else&#x27;, &#x27;except&#x27;, &#x27;finally&#x27;, &#x27;for&#x27;, &#x27;from&#x27;, &#x27;global&#x27;, &#x27;if&#x27;, &#x27;import&#x27;, &#x27;in&#x27;, &#x27;is&#x27;, &#x27;lambda&#x27;, &#x27;nonlocal&#x27;, &#x27;not&#x27;, &#x27;or&#x27;, &#x27;pass&#x27;, &#x27;raise&#x27;, &#x27;return&#x27;, &#x27;try&#x27;, &#x27;while&#x27;, &#x27;with&#x27;, &#x27;yield&#x27;]\n\nPython关键字的分类\n\n值\nNone True False\n\n异步\nawait async\n\n操作符\nis in not and or\n\n函数\ndef lambda return\n\n作用域\nglobal nonlocal\n\n条件\nif elif else\n\n异常\ntry except *else finally assert raise continue from\n\n模块\nimport as from\n\n上下文管理器\nwith *as\n\n循环\nfor *in while continue break *else\n\n类\nclass\n\n方法\ndel\n\n生成器\nyield\n\n占位\npass\n\n匹配\nmatch case as\n\n\n其中,*key表示重复的关键字,关键字最多的分类是异常分类,有六个关键字,大部分分类只有1~3个关键字.\n","categories":["Python"],"tags":["技术"]},{"title":"游戏开发","url":"/2027/10/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/","content":"待续…\n","categories":["Python"],"tags":["技术"]},{"title":"人工智能","url":"/2027/11/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/","content":"待续…\n","categories":["Python"],"tags":["技术"]},{"title":"网络爬虫","url":"/2027/08/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/","content":"待续…\n","categories":["Python"],"tags":["技术"]}]